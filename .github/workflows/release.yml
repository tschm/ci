<<<<<<< HEAD
name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  contents: write  # Needed to create releases
  packages: write  # Needed to push to GitHub Container Registry

jobs:
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Build the Docker image
        uses: ./.github/actions/docker
        with:
          github_actor: ${{ github.actor }}
          github_repository: ${{ github.repository }}/ci-image
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.tag }}
          dockerfiles: 'docker/Dockerfile'
          registry: ghcr.io

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [tag, build]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Generate Docker Image Info
        id: image-info
        run: |
          echo "IMAGE_URL=ghcr.io/${{ github.repository }}/ci-image:${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          echo "## Docker Image" > docker-image-info.md
          echo "The Docker image for this release is available at:" >> docker-image-info.md
          echo "\`\`\`" >> docker-image-info.md
          echo "ghcr.io/${{ github.repository }}/ci-image:${{ github.event.inputs.tag }}" >> docker-image-info.md
          echo "\`\`\`" >> docker-image-info.md
          echo "You can pull it with:" >> docker-image-info.md
          echo "\`\`\`bash" >> docker-image-info.md
          echo "docker pull ghcr.io/${{ github.repository }}/ci-image:${{ github.event.inputs.tag }}" >> docker-image-info.md
          echo "\`\`\`" >> docker-image-info.md

      - name: Create GitHub Release with artifacts
        uses: softprops/action-gh-release@v2.3.3
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.tag }}
          generate_release_notes: true
          body_path: docker-image-info.md
          files: "docker/**"
=======
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman
        
    - name: Log in to Container Registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
    - name: Extract metadata
      id: meta
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        
    - name: Build and tag image
      run: |
        # Build the image
        podman build --cgroup-manager=cgroupfs -t ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }} .
        podman build --cgroup-manager=cgroupfs -t ${{ steps.meta.outputs.image }}:latest .
        
        # Add version label if it's a versioned release
        if [[ "${{ steps.meta.outputs.tag }}" =~ ^v[0-9] ]]; then
          podman build --cgroup-manager=cgroupfs -t ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version }} .
        fi
        
    - name: Test image before release
      run: |
        echo "Running final tests before release..."
        podman run --cgroup-manager=cgroupfs --rm ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }} bash -c "
          python3 --version
          node --version
          git --version
          echo 'All tools available in release image'
        "
        
    - name: Push image to registry
      run: |
        echo "Pushing image to registry..."
        podman push ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
        podman push ${{ steps.meta.outputs.image }}:latest
        
        # Push versioned tag if applicable
        if [[ "${{ steps.meta.outputs.tag }}" =~ ^v[0-9] ]]; then
          podman push ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version }}
        fi
        
    - name: Generate release notes
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        cat > release-notes.md << EOF
        # Release ${{ steps.meta.outputs.tag }}
        
        ## Container Image
        
        The CI/CD container image has been built and published to:
        
        - \`${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}\`
        - \`${{ steps.meta.outputs.image }}:latest\`
        - \`${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version }}\`
        
        ## Usage
        
        Pull and run the container:
        
        \`\`\`bash
        podman pull ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
        podman run -it ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
        \`\`\`
        
        ## Included Tools
        
        - Python 3 with pip and common packages (pytest, requests, coverage, etc.)
        - Node.js with npm and global packages (eslint, prettier, typescript)
        - Git, curl, jq, and other essential CI/CD tools
        - Build tools and utilities
        
        ## Security
        
        - Runs as non-root user \`ciuser\`
        - Minimal attack surface
        - Regular security updates
        EOF
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.meta.outputs.tag }}
        release_name: Release ${{ steps.meta.outputs.tag }}
        body_path: release-notes.md
        draft: false
        prerelease: false
>>>>>>> 5ff617d (Complete CI/CD container implementation with Dockerfile, workflows, and documentation)
